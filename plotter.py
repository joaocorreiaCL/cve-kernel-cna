#!/usr/bin/python

import pandas as pd
import matplotlib.pyplot as plt
import re

def parse_version(version):
    """ Parse a version string into major and minor components, cleaning non-numeric suffixes. """
    if version == 'Not fixed yet':
        return (10, 0)  # Handle 'Not fixed yet' by assigning a high version number


    parts = version.split('.')
    major = int(parts[0]) if parts[0] else 0
    minor = int(re.sub(r'[^0-9]', '', parts[1])) if len(parts) > 1 else 0
    return major, minor

def find_lts_for_version(version):
    """ Determine the LTS version for a given software version. """
    major, minor = parse_version(version)

    # Define the ranges for each LTS, expressed as tuples of (major_start, major_end, minor_end)
    lts_ranges = {
        '4.19': (4, 5, 4),
        '5.4': (5, 5, 10),
        '5.10': (5, 5, 15),
        '5.15': (5, 6, 1),
        '6.1': (6, 6, 6),
        '6.6': (6, 7, 0)
    }

    for lts, (major_start, major_end, minor_end) in lts_ranges.items():
        if major_start <= major < major_end:
            return lts
        elif major == major_end and minor < minor_end:
            return lts

    return None  # If no matching LTS is found

# Load the CSV data
data = pd.read_csv('kernel_versions_analysis.csv')

# Apply the LTS finding function to both introduced and fixed versions
data['Introduced Version LTS'] = data['Introduced Version'].apply(find_lts_for_version)
data['Fixed Version LTS'] = data['Fixed Version'].apply(find_lts_for_version)

# Remove entries where LTS could not be determined
data.dropna(subset=['Introduced Version LTS', 'Fixed Version LTS'], inplace=True)

# Count occurrences of CVEs introduced and fixed per LTS version
introduced_counts = data['Introduced Version LTS'].value_counts().sort_index()
fixed_counts = data['Fixed Version LTS'].value_counts().sort_index()

# Create the bar chart to visualize the data
fig, ax = plt.subplots(figsize=(10, 6))
introduced_counts.plot(kind='bar', color='blue', ax=ax, label='Introduced', position=0, width=0.4)
fixed_counts.plot(kind='bar', color='green', ax=ax, label='Fixed', position=1, width=0.4)

plt.xlabel('Kernel LTS Version')
plt.ylabel('Number of CVEs')
plt.title('CVEs Introduced and Fixed per LTS Version')
plt.legend()
plt.grid(True)
plt.show()
