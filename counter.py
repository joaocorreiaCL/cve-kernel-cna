#!/usr/bin/python

import os
import json
from collections import defaultdict

# Define the ranges for each LTS, expressed as dictionaries with range tuples
lts_ranges = [
    {'version': '3.0', 'range': ((3, 0, 0), (3, 0, 101))},
    {'version': '3.2', 'range': ((3, 2, 0), (3, 2, 102))},
    {'version': '3.4', 'range': ((3, 4, 0), (3, 4, 113))},
    {'version': '3.10', 'range': ((3, 10, 0), (3, 10, 108))},
    {'version': '3.12', 'range': ((3, 12, 0), (3, 12, 74))},
    {'version': '3.14', 'range': ((3, 14, 0), (3, 14, 79))},
    {'version': '3.16', 'range': ((3, 16, 0), (3, 16, 85))},
    {'version': '3.18', 'range': ((3, 18, 0), (3, 18, 140))},
    {'version': '4.1', 'range': ((4, 1, 0), (4, 1, 52))},
    {'version': '4.4', 'range': ((4, 4, 0), (4, 4, 302))},
    {'version': '4.9', 'range': ((4, 9, 0), (4, 9, 337))},
    {'version': '4.14', 'range': ((4, 14, 0), (4, 14, 336))},
    {'version': '4.18', 'range': ((4, 18, 0), (4, 18, 20))},
    {'version': '4.19', 'range': ((4, 19, 0), (4, 19, 315))},
    {'version': '5.4', 'range': ((5, 4, 0), (5, 4, 277))},
    {'version': '5.10', 'range': ((5, 10, 0), (5, 10, 218))},
    {'version': '5.15', 'range': ((5, 15, 0), (5, 15, 160))},
    {'version': '6.1', 'range': ((6, 1, 0), (6, 1, 92))},
    {'version': '6.6', 'range': ((6, 6, 0), (6, 6, 32))},
]

# Function to check if a version falls within a given range
def is_version_in_range(version_tuple, version_range):
    lower_bound, upper_bound = version_range
    return lower_bound <= version_tuple <= upper_bound

# Function to check if a version string is a valid kernel version. This rules out git commit ids in the version field
def is_valid_kernel_version(version_str):
    parts = version_str.split('.')
    if len(parts) < 2:
        return False
    try:
        # Pad the version parts to ensure they have three parts
        while len(parts) < 3:
            parts.append('0')
        tuple(map(int, parts))
        return True
    except ValueError:
        return False

# Directory containing JSON files
json_directory = "json"

# Dictionary to hold counts of vulnerabilities per kernel version
vulnerability_counts = defaultdict(int)

# Parse JSON files and count vulnerabilities
for json_file in os.listdir(json_directory):
    if json_file.endswith(".json"):
        with open(os.path.join(json_directory, json_file), 'r') as file:
            cve_data = json.load(file)
            affected_products = cve_data.get('containers', {}).get('cna', {}).get('affected', [])
            for product in affected_products:
                versions = product.get('versions', [])
                for version_info in versions:
                    version_str = version_info.get('version', '')
                    if version_str and is_valid_kernel_version(version_str):
                        version_tuple = tuple(map(int, version_str.split('.')))
                        for lts in lts_ranges:
                            if is_version_in_range(version_tuple, lts['range']):
                                vulnerability_counts[lts['version']] += 1
                                break

# Output the results sorted by version
for version, count in sorted(vulnerability_counts.items(), key=lambda x: tuple(map(int, x[0].split('.')))):
    print(f"Kernel version {version} is affected by {count} CVEs.")
