#!/usr/bin/python

import csv
import os
from bs4 import BeautifulSoup

def extract_version_info(text):
    # This function extracts 'introduced' and 'fixed' version information from the given text
    if 'Issue introduced in' in text:
        if 'and fixed in' in text:
            parts = text.split('and fixed in')
            introduced_part = parts[0].strip()
            fixed_part = parts[1].strip()

            introduced_version = introduced_part.split(' ')[3]
            fixed_version_info = fixed_part.split(' ')[0]

            return introduced_version, fixed_version_info
        else:
            # Handle cases where the issue introduction is mentioned without a fixed version
            parts = text.split('Issue introduced in')
            introduced_part = parts[1].strip()
            introduced_version = introduced_part.split(' ')[0]

            # Since no fixed version is provided, we can return 'Not fixed yet' or similar placeholder
            return introduced_version, 'Not fixed yet'
    return None


def parse_cve_file(file_path):
    # Parse the HTML file and extract version data
    with open(file_path, 'r', encoding='utf-8') as file:
        soup = BeautifulSoup(file.read(), 'html.parser')
        text_blocks = soup.find_all('pre')
        version_info = []

        for block in text_blocks:
            for line in block.text.splitlines():
                if 'Issue introduced in' in line:
                    result = extract_version_info(line)
                    if result:
                        version_info.append(result)
        return version_info

def main():
    cve_directory = 'CVEs'
    csv_filename = 'kernel_versions_analysis.csv'

    with open(csv_filename, 'w', newline='', encoding='utf-8') as csvfile:
        csvwriter = csv.writer(csvfile)
        csvwriter.writerow(['CVE ID', 'Introduced Version', 'Fixed Version'])

        for filename in os.listdir(cve_directory):
            if filename.endswith('.txt'):
                file_path = os.path.join(cve_directory, filename)
                version_info_list = parse_cve_file(file_path)

                for version_info in version_info_list:
                    cve_id = filename.replace('.txt', '')
                    csvwriter.writerow([cve_id] + list(version_info))

    print(f'Data has been written to {csv_filename}')

if __name__ == '__main__':
    main()
